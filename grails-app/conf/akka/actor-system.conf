akka {

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.Logging$DefaultLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "ERROR"

  # Log at info level when messages are sent to dead letters.
  # Possible values:
  # on: all dead letters are logged
  # off: no logging of dead letters
  # n: positive integer, number of dead letters that will be logged
  log-dead-letters = 10

  default-dispatcher {
    # Must be one of the following
    # Dispatcher, PinnedDispatcher, or a FQCN to a class inheriting
    # MessageDispatcherConfigurator with a public constructor with
    # both com.typesafe.config.Config parameter and
    # akka.dispatch.DispatcherPrerequisites parameters.
    # PinnedDispatcher must be used together with executor=thread-pool-executor.
    type = "Dispatcher"

    # Which kind of ExecutorService to use for this dispatcher
    # Valid options:
    #  - "default-executor" requires a "default-executor" section
    #  - "fork-join-executor" requires a "fork-join-executor" section
    #  - "thread-pool-executor" requires a "thread-pool-executor" section
    #  - A FQCN of a class extending ExecutorServiceConfigurator
    executor = "default-executor"

    # This will be used if you have set "executor = "default-executor"".
    # If an ActorSystem is created with a given ExecutionContext, this
    # ExecutionContext will be used as the default executor for all
    # dispatchers in the ActorSystem configured with
    # executor = "default-executor". Note that "default-executor"
    # is the default value for executor, and therefore used if not
    # specified otherwise. If no ExecutionContext is given,
    # the executor configured in "fallback" will be used.
    default-executor {
      fallback = "fork-join-executor"
    }

    # This will be used if you have set "executor = "fork-join-executor""
    # Underlying thread pool implementation is scala.concurrent.forkjoin.ForkJoinPool
    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 8

      # The parallelism factor is used to determine thread pool size using the
      # following formula: ceil(available processors * factor). Resulting size
      # is then bounded by the parallelism-min and parallelism-max values.
      parallelism-factor = 3.0

      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 128

      # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
      # like peeking mode which "pop".
      task-peeking-mode = "FIFO"
    }
  }
}